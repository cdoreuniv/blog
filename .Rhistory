constriangle(0,0,0,1,0.5,sqrt(3)/2)
targets::tar_make()
divide_list_triangle = function(liste_triangles){
n = length(liste_triangles)
liste = vector(mode = "list", length = n)
for(i in liste_triangles){
liste[[i]] = divide_triangle(liste_triangle[[i]][1,1], #xA
liste_triangle[[i]][1,2], #yA
liste_triangle[[i]][2,1], #xB
liste_triangle[[i]][2,2], #yB
liste_triangle[[i]][3,1], #xC
liste_triangle[[i]][3,2]  #yC
)
}
return(liste)
}
targets::tar_make()
targets::tar_meta(fields = "error")
divide_list_triangle = function(liste_triangles){
n = length(liste_triangles)
liste = vector(mode = "list", length = n)
for(i in liste_triangles){
liste[[i]] = divide_triangle(liste_triangles[[i]][1,1], #xA
liste_triangles[[i]][1,2], #yA
liste_triangles[[i]][2,1], #xB
liste_triangles[[i]][2,2], #yB
liste_triangles[[i]][3,1], #xC
liste_triangles[[i]][3,2]  #yC
)
}
return(liste)
}
targets::tar_make()
targets::tar_meta(fields = "error")
library(targets)
#source("R/fonctions2.R")
tar_option_set(
packages = c("heron", "ggplot2", "tarchetypes"))
tar_source()
# exécuter vos cibles
list(
tar_target(div1, divide_triangle(0,0,0,1,0.5,sqrt(3)/2)),
tar_target(plot1, plot_triangles(div1)),
tar_target(aire1, calcul_aire(div1)),
tar_target(first, divide_list_triangle(div1)),
tar_target(plot2, plot_triangles(first)),
tar_target(aire2, calcul_aire(first)),
tar_target(second, divide_list_triangle(first)),
tar_target(plot3, plot_triangles(second)),
tar_target(aire3, calcul_aire(second)),
tar_target(third, divide_list_triangle(second)),
tar_target(plot4, plot_triangles(third)),
tar_target(aire4, calcul_aire(third))
)
targets::tar_make()
targets::tar_meta(fields = error, complete_only = TRUE)
divide_list_triangle = function(liste_triangles){
n = length(liste_triangles)
liste = vector(mode = "list", length = n)
for(i in liste_triangles){
liste[[i]] = divide_triangle(liste_triangles[[i]][1,1], #xA
liste_triangles[[i]][1,2], #yA
liste_triangles[[i]][2,1], #xB
liste_triangles[[i]][2,2], #yB
liste_triangles[[i]][3,1], #xC
liste_triangles[[i]][3,2]  #yC
)
}
return(liste)
}
div1 = divide_triangle(0,0,0,1,0.5,sqrt(3)/2)
###################################################
########### CONSTRUCTION D'UN TRIANGLE ############
###################################################
#' Construction d'un triangle
#' Construction d'un triangle à partir des coordonnées de chaque point
#'
#' @param xA abcsisse de A
#' @param yA ordonnée de A
#' @param xB abcsisse de B
#' @param yB ordonnée de B
#' @param xC abcsisse de C
#' @param yC ordonnée de C
#'
#' @return un tableau avec les abcsisses sur la première colonne et les ordonnées sur la seconde
#' @export
#'
#' @examples constriangle(0,0,3,3,6,0)
#'
constriangle = function(xA,yA,xB,yB,xC,yC){
xtriangle = c(xA,xB,xC) # abcsisses du triangle
ytriangle = c(yA,yB,yC) # ordonnées du triangle
triangle = cbind(xtriangle, ytriangle)
return(triangle)
}
###################################################
####### CALCUL MOITIÉS CÔTÉS D'UN TRIANGLE ########
###################################################
demi_cotes = function(xA,yA,xB,yB){
x = xA + xB
demix = x / 2
y = yA + yB
demiy = y / 2
cote = cbind(demix, demiy)
return(cote)
}
demi_triangle = function(xA,yA,xB,yB,xC,yC){
cote = rbind(demi_cotes(xA,yA,xB,yB), demi_cotes(xB,yB,xC,yC), demi_cotes(xA,yA,xC,yC))
return(cote)
}
###################################################
############## DIVISION D'UN TRIANGLE #############
###################################################
#'
#' A function dividing a triangle to create a  Sierpiński's triangle
#' @param xA A point abcsissa
#' @param yA A point ordinate
#' @param xB B point abcsissa
#' @param yB B point ordinate
#' @param xC C point abcsissa
#' @param yC C point ordinate
#'
#' @return a list of triangles
#' @export
#'
#' @examples  divide_triangle(0,0,3,3,6,0)
#'
divide_triangle = function(xA,yA,xB,yB,xC,yC){
triangle1 = constriangle(xA,yA,xB,yB,xC,yC)
demi_triangle1 = demi_triangle(xA,yA,xB,yB,xC,yC)
triangle2 = constriangle(xA, yA, demi_triangle1[1,1], demi_triangle1[1,2], demi_triangle1[3,1], demi_triangle1[3,2])
triangle3 = constriangle( demi_triangle1[1,1], demi_triangle1[1,2], xB,yB, demi_triangle1[2,1], demi_triangle1[2,2])
triangle4 = constriangle(demi_triangle1[3,1], demi_triangle1[3,2], demi_triangle1[2,1], demi_triangle1[2,2], xC,yC)
triangle = list(triangle2, triangle3, triangle4)
return(triangle)
}
###################################################
####### DIVISION DES TRIANGLES D'UNE LISTE ########
###################################################
#' A function dividing each triangle of a list of triangles to create a Sierpiński's triangle
#'
#' @param liste_triangles list of triangle on matrix form
#'
#' @return a list of triangle
#' @export
#'
#' @examples divide_list_triangle(divide_triangle(0,0,3,3,6,0))
divide_list_triangle = function(liste_triangles){
n = length(liste_triangles)
liste = vector(mode = "list", length = n)
for(i in liste_triangles){
liste[[i]] = divide_triangle(liste_triangles[[i]][1,1], #xA
liste_triangles[[i]][1,2], #yA
liste_triangles[[i]][2,1], #xB
liste_triangles[[i]][2,2], #yB
liste_triangles[[i]][3,1], #xC
liste_triangles[[i]][3,2]  #yC
)
}
return(liste)
}
###################################################
##### REPRÉSENTATION D'UNE LISTE DE TRIANGLES #####
###################################################
plot_triangles = function(list_triangles){
df = data.frame()
for (i in seq_along(list_triangles)) {
dfi = data.frame(x = list_triangles[[i]][,1], y = list_triangles[[i]][,2])
df = rbind(df, dfi)
}
g = ggplot(df, aes(x, y )) +
geom_polygon(color = "black") +
theme_void() +
scale_fill_manual(values = rep("black", length(list_triangles)), guide = "none")
return(g)
}
###################################################
### CALCUL DE L'AIRE DES TRIANGLES D'UNE LISTE ####
###################################################
calcul_longueur = function(xA,yA,xB,yB){
AB2 = (xB-xA)^2 + (yB - yA)^2
AB = sqrt(AB2)
return(AB)
}
calcul_aire = function(list_triangles){
somme = 0
for(i in seq_along(list_triangles)){
AB = calcul_longueur( list_triangles[[i]][1,1], list_triangles[[i]][1,2],
list_triangles[[i]][2,1], list_triangles[[i]][2,2])
BC = calcul_longueur( list_triangles[[i]][2,1], list_triangles[[i]][2,2],
list_triangles[[i]][3,1], list_triangles[[i]][3,2])
AC = calcul_longueur( list_triangles[[i]][1,1], list_triangles[[i]][1,2],
list_triangles[[i]][3,1], list_triangles[[i]][3,2])
aire = heron2(AB,BC,AC)
somme = somme + aire
}
return(somme)
}
div1 = divide_triangle(0,0,0,1,0.5,sqrt(3)/2)
divide_list_triangle(div1)
div1[[1]]
div1[[1]][1,1]
div1[[1]][1,2]
###################################################
########### CONSTRUCTION D'UN TRIANGLE ############
###################################################
#' Construction d'un triangle
#' Construction d'un triangle à partir des coordonnées de chaque point
#'
#' @param xA abcsisse de A
#' @param yA ordonnée de A
#' @param xB abcsisse de B
#' @param yB ordonnée de B
#' @param xC abcsisse de C
#' @param yC ordonnée de C
#'
#' @return un tableau avec les abcsisses sur la première colonne et les ordonnées sur la seconde
#' @export
#'
#' @examples constriangle(0,0,3,3,6,0)
#'
constriangle = function(xA,yA,xB,yB,xC,yC){
xtriangle = c(xA,xB,xC) # abcsisses du triangle
ytriangle = c(yA,yB,yC) # ordonnées du triangle
triangle = cbind(xtriangle, ytriangle)
return(triangle)
}
###################################################
####### CALCUL MOITIÉS CÔTÉS D'UN TRIANGLE ########
###################################################
demi_cotes = function(xA,yA,xB,yB){
x = xA + xB
demix = x / 2
y = yA + yB
demiy = y / 2
cote = cbind(demix, demiy)
return(cote)
}
demi_triangle = function(xA,yA,xB,yB,xC,yC){
cote = rbind(demi_cotes(xA,yA,xB,yB), demi_cotes(xB,yB,xC,yC), demi_cotes(xA,yA,xC,yC))
return(cote)
}
###################################################
############## DIVISION D'UN TRIANGLE #############
###################################################
#'
#' A function dividing a triangle to create a  Sierpiński's triangle
#' @param xA A point abcsissa
#' @param yA A point ordinate
#' @param xB B point abcsissa
#' @param yB B point ordinate
#' @param xC C point abcsissa
#' @param yC C point ordinate
#'
#' @return a list of triangles
#' @export
#'
#' @examples  divide_triangle(0,0,3,3,6,0)
#'
divide_triangle = function(xA,yA,xB,yB,xC,yC){
triangle1 = constriangle(xA,yA,xB,yB,xC,yC)
demi_triangle1 = demi_triangle(xA,yA,xB,yB,xC,yC)
triangle2 = constriangle(xA, yA, demi_triangle1[1,1], demi_triangle1[1,2], demi_triangle1[3,1], demi_triangle1[3,2])
triangle3 = constriangle( demi_triangle1[1,1], demi_triangle1[1,2], xB,yB, demi_triangle1[2,1], demi_triangle1[2,2])
triangle4 = constriangle(demi_triangle1[3,1], demi_triangle1[3,2], demi_triangle1[2,1], demi_triangle1[2,2], xC,yC)
triangle = list(triangle2, triangle3, triangle4)
return(triangle)
}
###################################################
####### DIVISION DES TRIANGLES D'UNE LISTE ########
###################################################
#' A function dividing each triangle of a list of triangles to create a Sierpiński's triangle
#'
#' @param liste_triangles list of triangle on matrix form
#'
#' @return a list of triangle
#' @export
#'
#' @examples divide_list_triangle(divide_triangle(0,0,3,3,6,0))
divide_list_triangle = function(liste_triangles){
n = length(liste_triangles)
liste = vector(mode = "list", length = n)
for(i in 1:liste_triangles){
liste[[i]] = divide_triangle(liste_triangles[[i]][1,1], #xA
liste_triangles[[i]][1,2], #yA
liste_triangles[[i]][2,1], #xB
liste_triangles[[i]][2,2], #yB
liste_triangles[[i]][3,1], #xC
liste_triangles[[i]][3,2]  #yC
)
}
return(liste)
}
###################################################
##### REPRÉSENTATION D'UNE LISTE DE TRIANGLES #####
###################################################
plot_triangles = function(list_triangles){
df = data.frame()
for (i in seq_along(list_triangles)) {
dfi = data.frame(x = list_triangles[[i]][,1], y = list_triangles[[i]][,2])
df = rbind(df, dfi)
}
g = ggplot(df, aes(x, y )) +
geom_polygon(color = "black") +
theme_void() +
scale_fill_manual(values = rep("black", length(list_triangles)), guide = "none")
return(g)
}
###################################################
### CALCUL DE L'AIRE DES TRIANGLES D'UNE LISTE ####
###################################################
calcul_longueur = function(xA,yA,xB,yB){
AB2 = (xB-xA)^2 + (yB - yA)^2
AB = sqrt(AB2)
return(AB)
}
calcul_aire = function(list_triangles){
somme = 0
for(i in seq_along(list_triangles)){
AB = calcul_longueur( list_triangles[[i]][1,1], list_triangles[[i]][1,2],
list_triangles[[i]][2,1], list_triangles[[i]][2,2])
BC = calcul_longueur( list_triangles[[i]][2,1], list_triangles[[i]][2,2],
list_triangles[[i]][3,1], list_triangles[[i]][3,2])
AC = calcul_longueur( list_triangles[[i]][1,1], list_triangles[[i]][1,2],
list_triangles[[i]][3,1], list_triangles[[i]][3,2])
aire = heron2(AB,BC,AC)
somme = somme + aire
}
return(somme)
}
divide_list_triangle(div1)
divide_list_triangle = function(liste_triangles){
n = length(liste_triangles)
liste = vector(mode = "list", length = n)
for(i in 1:n){
liste[[i]] = divide_triangle(liste_triangles[[i]][1,1], #xA
liste_triangles[[i]][1,2], #yA
liste_triangles[[i]][2,1], #xB
liste_triangles[[i]][2,2], #yB
liste_triangles[[i]][3,1], #xC
liste_triangles[[i]][3,2]  #yC
)
}
return(liste)
}
divide_list_triangle(div1)
targets::tr_make()
targets::tar_make()
targets::tar_meta(fields = error, complete_only = TRUE)
divide_list_triangle(div1)
divide_list_triangle2 <- function(liste_triangle){
sous_liste <- list()
for (i in liste_triangle){
sous_liste <- append(sous_liste,divide_triangle(i))
}
return(sous_liste)
}
divide_list_triangle2(div1)
triangle1 = constriangle(coord)
coord = c(0,0,0,1,0.5,sqrt(3)/2)
triangle1 = constriangle(coord)
###################################################
########### CONSTRUCTION D'UN TRIANGLE ############
###################################################
#' Construction d'un triangle
#' Construction d'un triangle à partir des coordonnées de chaque point
#'
#' @param xA abcsisse de A
#' @param yA ordonnée de A
#' @param xB abcsisse de B
#' @param yB ordonnée de B
#' @param xC abcsisse de C
#' @param yC ordonnée de C
#'
#' @return un tableau avec les abcsisses sur la première colonne et les ordonnées sur la seconde
#' @export
#'
#' @examples constriangle(0,0,3,3,6,0)
#'
constriangle = function(xA,yA,xB,yB,xC,yC){
triangle = c(xA,yA,xB,yB,xC,yC)
return(triangle)
}
###################################################
####### CALCUL MOITIÉS CÔTÉS D'UN TRIANGLE ########
###################################################
demi_cotes = function(xA,yA,xB,yB){
x = xA + xB
demix = x / 2
y = yA + yB
demiy = y / 2
cote = cbind(demix, demiy)
return(cote)
}
demi_triangle = function(xA,yA,xB,yB,xC,yC){
demi_ab = demi_cotes(xA,yA,xB,yB) # Point AB'
demi_bc =  demi_cotes(xB,yB,xC,yC) # Point BC'
demi_ac = demi_cotes(xA,yA,xC,yC) # Point AC'
cote = c(demi_ab,demi_bc,demi_ac)
return(cote)
}
###################################################
############## DIVISION D'UN TRIANGLE #############
###################################################
#'
#' A function dividing a triangle to create a  Sierpiński's triangle
#' @param xA A point abcsissa
#' @param yA A point ordinate
#' @param xB B point abcsissa
#' @param yB B point ordinate
#' @param xC C point abcsissa
#' @param yC C point ordinate
#'
#' @return a list of triangles
#' @export
#'
#' @examples  divide_triangle(0,0,3,3,6,0)
#'
divide_triangle = function(coord =  c(xA,yA,xB,yB,xC,yC)){ # Merci Benoît-Alexandre pour l'idée de coord
demi_triangle1 = demi_triangle(coord[1],coord[2],coord[3],coord[4],coord[5],coord[6])
triangle1 = constriangle(coord[1],coord[2],coord[3],coord[4],coord[5], coord[6]) # Triangle A-B-C
triangle2 = constriangle(coord[1],coord[2], demi_triangle1[1], demi_triangle1[2], demi_triangle1[5], demi_triangle1[6] ) # Triangle A-AB'-AC'
triangle3 = constriangle(demi_triangle1[1], demi_triangle1[2], coord[3],coord[4], demi_triangle1[3], demi_triangle1[4] ) # Triangle AB'-B-BC'
triangle4 = constriangle(demi_triangle1[5], demi_triangle1[6], demi_triangle1[3], demi_triangle1[4], coord[5],coord[6], ) # Triangle AC'-BC'-C
liste_triangles = list(triangle2, triangle3, triangle4)
return(liste_triangles)
}
###################################################
####### DIVISION DES TRIANGLES D'UNE LISTE ########
###################################################
#' A function dividing each triangle of a list of triangles to create a Sierpiński's triangle
#'
#' @param liste_triangles list of triangle on matrix form
#'
#' @return a list of triangle
#' @export
#'
#' @examples divide_list_triangle(divide_triangle(0,0,3,3,6,0))
divide_list_triangle = function(liste_triangles){
liste = list()
for(x in liste_triangles){
liste = append(liste,divide_triangle(x))
}
return(liste)
}
###################################################
##### REPRÉSENTATION D'UNE LISTE DE TRIANGLES #####
###################################################
plot_triangles = function(liste_triangles){
df = data.frame()
for (i in seq_along(liste_triangles)) {
dfi = data.frame(x = c(liste_triangles[[i]][1], liste_triangles[[i]][3], liste_triangles[[i]][5]),
y = c(liste_triangles[[i]][2], liste_triangles[[i]][4], liste_triangles[[i]][6]))
df = rbind(df, dfi)
}
g = ggplot(df, aes(x, y )) +
geom_polygon(color = "black") +
theme_void() +
return(g)
}
###################################################
### CALCUL DE L'AIRE DES TRIANGLES D'UNE LISTE ####
###################################################
calcul_longueur = function(xA,yA,xB,yB){
AB2 = (xB-xA)^2 + (yB - yA)^2
AB = sqrt(AB2)
return(AB)
}
calcul_aire = function(list_triangles){
somme = 0
for(i in seq_along(list_triangles)){
AB = calcul_longueur( list_triangles[[i]][1], list_triangles[[i]][2],
list_triangles[[i]][3], list_triangles[[i]][4])
BC = calcul_longueur( list_triangles[[i]][3], list_triangles[[i]][4],
list_triangles[[i]][5], list_triangles[[i]][6])
AC = calcul_longueur( list_triangles[[i]][1], list_triangles[[i]][2],
list_triangles[[i]][5], list_triangles[[i]][6])
aire = heron2(AB,BC,AC)
somme = somme + aire
}
return(somme)
}
targets::tar_make()
targets::tar_meta(fields = error)
source("R/fonctions.R")
targets::tar_make()
targets::tar_meta(fields = error)
library(targets)
source("R/fonctions.R")
tar_option_set(
packages = c("heron", "ggplot2", "tarchetypes"))
tar_source()
# exécuter vos cibles
list(
tar_target("div1", divide_triangle(coord = c(0,0,0,1,0.5,sqrt(3)/2))),
tar_target("plot1", plot_triangles(div1)),
tar_target("aire1", calcul_aire(div1)),
tar_target("first", divide_list_triangle(div1)),
tar_target("plot2", plot_triangles(first)),
tar_target("aire2", calcul_aire(first)),
tar_target("second", divide_list_triangle(first)),
tar_target("plot3", plot_triangles(second)),
tar_target("aire3", calcul_aire(second)),
tar_target("third", divide_list_triangle(second)),
tar_target("plot4", plot_triangles(third)),
tar_target("aire4", calcul_aire(third))
)
targets::tar_make()
install.packages("igraph")
targets::tar_make()
targets::tar_meta(fields = error)
targets::tar_make()
